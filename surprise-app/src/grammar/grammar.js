/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,16],$V2=[1,17],$V3=[1,20],$V4=[1,27],$V5=[1,23],$V6=[1,19],$V7=[1,22],$V8=[1,21],$V9=[1,32],$Va=[1,25],$Vb=[1,26],$Vc=[1,34],$Vd=[1,35],$Ve=[1,36],$Vf=[1,37],$Vg=[1,33],$Vh=[1,24],$Vi=[1,39],$Vj=[1,40],$Vk=[1,30],$Vl=[2,5,19,20,21,22,25,26,28,30,33,37,39,40,47,56,61,62,63,64,68,69,72,73,74],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,53],$Vu=[1,54],$Vv=[1,55],$Vw=[1,56],$Vx=[1,57],$Vy=[1,68],$Vz=[2,64],$VA=[1,74],$VB=[1,75],$VC=[1,76],$VD=[12,23,38,44,45,46,47,48,49,50,51,52,53,54,55,67],$VE=[2,71],$VF=[12,23,38,44,45,46,47,50,51,52,53,54,55,67],$VG=[12,23,38,44,45,50,51,52,53,54,55,67],$VH=[12,23,38,44,45,54,55,67],$VI=[2,5,19,20,21,22,25,26,27,28,30,33,37,39,40,47,56,61,62,63,64,68,69,72,73,74],$VJ=[1,124],$VK=[1,127],$VL=[23,67],$VM=[1,148],$VN=[1,147],$VO=[1,163],$VP=[33,37],$VQ=[2,35],$VR=[33,37,39];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"IF":7,"WHILE":8,"SWITCH":9,"FOR":10,"DO_WHILE":11,";":12,"RETURN":13,"EXPRESION":14,"ASIGNAR":15,"DECLARAR_FUNCIONES":16,"DECLARAR_VARIABLE":17,"CONSOLE":18,"break":19,"continue":20,"while":21,"(":22,")":23,"CUERPO":24,"do":25,"if":26,"else":27,"for":28,"CUERPO_FOR":29,"switch":30,"{":31,"CUERPO_SWITCH":32,"}":33,"DEFAULT":34,"CASE":35,"CUERPO_CASE":36,"case":37,":":38,"default":39,"console":40,".":41,"log":42,"LISTA_EXPRESIONES":43,"&&":44,"||":45,"+":46,"-":47,"*":48,"/":49,">":50,">=":51,"<":52,"<=":53,"==":54,"!=":55,"!":56,"ACCESO":57,"++":58,"--":59,"LITERAL":60,"number":61,"true":62,"false":63,"cadena":64,"FUNCION":65,"=":66,",":67,"id":68,"return":69,"DINAMICO":70,"TIPO":71,"let":72,"const":73,"function":74,"PARAMETROS":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:";",19:"break",20:"continue",21:"while",22:"(",23:")",25:"do",26:"if",27:"else",28:"for",30:"switch",31:"{",33:"}",37:"case",38:":",39:"default",40:"console",41:".",42:"log",44:"&&",45:"||",46:"+",47:"-",48:"*",49:"/",50:">",51:">=",52:"<",53:"<=",54:"==",55:"!=",56:"!",58:"++",59:"--",61:"number",62:"true",63:"false",64:"cadena",66:"=",67:",",68:"id",69:"return",72:"let",73:"const",74:"function"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[8,5],[11,6],[7,5],[7,7],[7,7],[10,5],[29,5],[29,5],[9,7],[9,6],[32,2],[32,2],[32,3],[32,1],[32,1],[36,1],[36,0],[35,5],[35,4],[34,3],[24,2],[24,3],[18,6],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,2],[14,2],[14,3],[14,2],[14,2],[14,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[15,3],[43,3],[43,1],[65,4],[65,3],[57,1],[13,1],[13,2],[17,6],[17,4],[71,1],[70,1],[70,1],[16,8],[16,7],[75,5],[75,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 3:
$$[$0-1].push($$[$0]);this.$ = $$[$0-1];
break;
case 4:
this.$ = [$$[$0]];
break;
case 5: case 6: case 7: case 8: case 13: case 18: case 59: case 64: case 65:
this.$ = $$[$0]
break;
case 9: case 10: case 14: case 15: case 56:
this.$ = $$[$0-1]
break;
case 11: case 12:
this.$ = new Call($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 16:
this.$ = new Break(_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 17:
this.$ = new Continue(_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 39:
this.$ = new Statement([], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 40:
this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 41:
this.$ = new Console($$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 42:
this.$ = new And($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 43:
this.$ = new Or($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 44:
this.$ = new Plus($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 45:
this.$ = new Minus($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 46:
this.$ = new Mul($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 47:
this.$ = new Div($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 48:
this.$ = new Great(false,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 49:
this.$ = new Great(true,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 50:
this.$ = new Less(false,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 51:
this.$ = new Less(true,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 52:
this.$ = new Equal($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 53:
this.$ = new NotEqual($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 54:
this.$ = new Neg($$[$0],_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 55:
this.$ = new Not($$[$0],_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 57:
this.$ = new Inc($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 58:
this.$ = new Dec($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 60:
this.$ = new Primitive($$[$0], _$[$0].first_line, _$[$0].first_column, Types.NUMBER)
break;
case 61:
this.$ = new Primitive(true, _$[$0].first_line, _$[$0].first_column, Types.BOOLEAN)
break;
case 62:
this.$ = new Primitive(false, _$[$0].first_line, _$[$0].first_column, Types.BOOLEAN)
break;
case 63:
this.$ = new Complex($$[$0], _$[$0].first_line, _$[$0].first_column, Types.STRING)
break;
case 66:
this.$ = new AssignVariable($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 67:
$$[$0-2].push($$[$0]);this.$=$$[$0-2]
break;
case 68:
this.$ = [$$[$0]]
break;
case 69:
this.$ = new AccessFunction($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 70:
this.$ = new AccessFunction($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 71:
this.$ = new AccessVariable($$[$0],null,_$[$0].first_line,_$[$0].first_column)
break;
case 72:
 this.$ = new ReturnTS(null,_$[$0].first_line,_$[$0].first_column)
break;
case 73:
 this.$ = new ReturnTS($$[$0],_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 74:
this.$ = new DeclareVariable($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 75:
this.$ = new DeclareVariable($$[$0-3],$$[$0-2],$$[$0],null,_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 76:
this.$ = getType($$[$0])
break;
case 77:
this.$=false
break;
case 78:
this.$=true
break;
case 79:
this.$ = new DeclareFunction($$[$0-6],$$[$0-4],$$[$0-1],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column)
break;
case 80:
this.$ = new DeclareFunction($$[$0-5],[],$$[$0-1],$$[$0],_$[$0-6].first_line,_$[$0-6].first_column)
break;
case 81:
$$[$0-4].push(new Param($$[$0-2],$$[$0]));this.$=$$[$0-4]
break;
case 82:
this.$ = [new Param($$[$0-2],$$[$0])]
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:$V2,21:$V3,22:$V4,25:$V5,26:$V6,28:$V7,30:$V8,40:$V9,47:$Va,56:$Vb,57:28,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg,69:$Vh,70:31,72:$Vi,73:$Vj,74:$Vk},{1:[3]},{2:$V0,5:[1,41],6:42,7:5,8:6,9:7,10:8,11:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:$V2,21:$V3,22:$V4,25:$V5,26:$V6,28:$V7,30:$V8,40:$V9,47:$Va,56:$Vb,57:28,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg,69:$Vh,70:31,72:$Vi,73:$Vj,74:$Vk},{1:[2,2]},o($Vl,[2,4]),o($Vl,[2,5]),o($Vl,[2,6]),o($Vl,[2,7]),o($Vl,[2,8]),{12:[1,43]},{12:[1,44]},{12:[1,45],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{12:[1,58]},o($Vl,[2,13]),{12:[1,59]},{12:[1,60]},{12:[1,61]},{12:[1,62]},o($Vl,[2,18]),{22:[1,63]},{22:[1,64]},{22:[1,65]},{22:[1,66]},{24:67,31:$Vy},{12:[2,72],14:69,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{14:71,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{14:72,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{14:73,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},o([12,44,45,46,47,48,49,50,51,52,53,54,55],$Vz,{58:$VA,59:$VB,66:$VC}),o($VD,[2,59]),{68:[1,77]},{68:[1,78]},{41:[1,79]},o([12,23,38,44,45,46,47,48,49,50,51,52,53,54,55,58,59,66,67],$VE,{22:[1,80]}),o($VD,[2,60]),o($VD,[2,61]),o($VD,[2,62]),o($VD,[2,63]),o($VD,[2,65]),{68:[2,77]},{68:[2,78]},{1:[2,1]},o($Vl,[2,3]),o($Vl,[2,9]),o($Vl,[2,10]),o($Vl,[2,11]),{14:81,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{14:82,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{14:83,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{14:84,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{14:85,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{14:86,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{14:87,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{14:88,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{14:89,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{14:90,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{14:91,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{14:92,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},o($Vl,[2,12]),o($Vl,[2,14]),o($Vl,[2,15]),o($Vl,[2,16]),o($Vl,[2,17]),{14:93,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{14:94,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{14:95,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{15:98,17:97,29:96,57:99,68:[1,100],70:31,72:$Vi,73:$Vj},{21:[1,101]},{2:$V0,4:103,6:4,7:5,8:6,9:7,10:8,11:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:$V2,21:$V3,22:$V4,25:$V5,26:$V6,28:$V7,30:$V8,33:[1,102],40:$V9,47:$Va,56:$Vb,57:28,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg,69:$Vh,70:31,72:$Vi,73:$Vj,74:$Vk},{12:[2,73],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},o($VD,$Vz,{58:$VA,59:$VB}),o($VF,[2,54],{48:$Vq,49:$Vr}),o($VD,[2,55]),{23:[1,104],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},o($VD,[2,57]),o($VD,[2,58]),{14:105,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{22:[1,106]},{38:[1,107]},{42:[1,108]},{14:111,22:$V4,23:[1,110],43:109,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},o([12,23,38,44,45,67],[2,42],{46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx}),o([12,23,38,45,67],[2,43],{44:$Vm,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx}),o($VF,[2,44],{48:$Vq,49:$Vr}),o($VF,[2,45],{48:$Vq,49:$Vr}),o($VD,[2,46]),o($VD,[2,47]),o($VG,[2,48],{46:$Vo,47:$Vp,48:$Vq,49:$Vr}),o($VG,[2,49],{46:$Vo,47:$Vp,48:$Vq,49:$Vr}),o($VG,[2,50],{46:$Vo,47:$Vp,48:$Vq,49:$Vr}),o($VG,[2,51],{46:$Vo,47:$Vp,48:$Vq,49:$Vr}),o($VH,[2,52],{46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv}),o($VH,[2,53],{46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv}),{23:[1,112],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{23:[1,113],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{23:[1,114],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{23:[1,115]},{12:[1,116]},{12:[1,117]},{66:$VC},{66:$VE},{22:[1,118]},o($VI,[2,39]),{2:$V0,6:42,7:5,8:6,9:7,10:8,11:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V1,20:$V2,21:$V3,22:$V4,25:$V5,26:$V6,28:$V7,30:$V8,33:[1,119],40:$V9,47:$Va,56:$Vb,57:28,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg,69:$Vh,70:31,72:$Vi,73:$Vj,74:$Vk},o($VD,[2,56]),{12:[2,66],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{23:[1,121],68:[1,122],75:120},{68:$VJ,71:123},{22:[1,125]},{23:[1,126],67:$VK},o($VD,[2,70]),o($VL,[2,68],{44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx}),{24:128,31:$Vy},{24:129,31:$Vy},{31:[1,130]},{24:131,31:$Vy},{14:132,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{14:133,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{14:134,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},o($VI,[2,40]),{23:[1,135],67:[1,136]},{38:[1,137]},{38:[1,138]},{12:[2,75],66:[1,139]},o([12,23,31,66,67],[2,76]),{14:111,22:$V4,43:140,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},o($VD,[2,69]),{14:141,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},o($Vl,[2,21],{27:[1,142]}),o($Vl,[2,19]),{32:143,33:[1,144],34:145,35:146,37:$VM,39:$VN},o($Vl,[2,24]),{12:[1,149],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{12:[1,150],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{23:[1,151],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{38:[1,152]},{68:[1,153]},{68:$VJ,71:154},{68:$VJ,71:155},{14:156,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{23:[1,157],67:$VK},o($VL,[2,67],{44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx}),{7:159,24:158,26:$V6,31:$Vy},{33:[1,160]},o($Vl,[2,28]),{33:[2,33],35:161,37:$VM},{33:[2,32],34:162,37:$VO,39:$VN},{38:[1,164]},{14:165,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{14:166,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{14:167,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},{12:[2,20]},{68:$VJ,71:168},{38:[1,169]},{24:170,31:$Vy},o($VL,[2,82]),{12:[2,74],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{12:[2,41]},o($Vl,[2,22]),o($Vl,[2,23]),o($Vl,[2,27]),{33:[2,29],37:$VO},{33:[2,30],35:171,37:$VM},{14:172,22:$V4,47:$Va,56:$Vb,57:70,60:29,61:$Vc,62:$Vd,63:$Ve,64:$Vf,65:38,68:$Vg},o($VP,$VQ,{6:4,7:5,8:6,9:7,10:8,11:9,13:10,14:11,15:12,16:13,17:14,18:15,57:28,60:29,70:31,65:38,36:173,4:174,2:$V0,19:$V1,20:$V2,21:$V3,22:$V4,25:$V5,26:$V6,28:$V7,30:$V8,40:$V9,47:$Va,56:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,68:$Vg,69:$Vh,72:$Vi,73:$Vj,74:$Vk}),{38:[1,175],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{23:[2,25],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{23:[2,26],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{24:176,31:$Vy},{68:$VJ,71:177},o($Vl,[2,80]),{33:[2,31],37:$VO},{38:[1,178],44:$Vm,45:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},o($VP,[2,38]),o($VR,[2,34],{7:5,8:6,9:7,10:8,11:9,13:10,14:11,15:12,16:13,17:14,18:15,57:28,60:29,70:31,65:38,6:42,2:$V0,19:$V1,20:$V2,21:$V3,22:$V4,25:$V5,26:$V6,28:$V7,30:$V8,40:$V9,47:$Va,56:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,68:$Vg,69:$Vh,72:$Vi,73:$Vj,74:$Vk}),o($VR,$VQ,{6:4,7:5,8:6,9:7,10:8,11:9,13:10,14:11,15:12,16:13,17:14,18:15,57:28,60:29,70:31,65:38,4:174,36:179,2:$V0,19:$V1,20:$V2,21:$V3,22:$V4,25:$V5,26:$V6,28:$V7,30:$V8,40:$V9,47:$Va,56:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,68:$Vg,69:$Vh,72:$Vi,73:$Vj,74:$Vk}),o($Vl,[2,79]),o($VL,[2,81]),o($VR,$VQ,{6:4,7:5,8:6,9:7,10:8,11:9,13:10,14:11,15:12,16:13,17:14,18:15,57:28,60:29,70:31,65:38,4:174,36:180,2:$V0,19:$V1,20:$V2,21:$V3,22:$V4,25:$V5,26:$V6,28:$V7,30:$V8,40:$V9,47:$Va,56:$Vb,61:$Vc,62:$Vd,63:$Ve,64:$Vf,68:$Vg,69:$Vh,72:$Vi,73:$Vj,74:$Vk}),o($VR,[2,37]),o($VR,[2,36])],
defaultActions: {3:[2,2],39:[2,77],40:[2,78],41:[2,1],100:[2,71],151:[2,20],157:[2,41]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Types,getType} = require('../compiler/utils/Type');
    const {Param} = require('../compiler/utils/Param');

    const {Break} = require('../compiler/actions/instruction/transfer/Break');
    const {Continue} = require('../compiler/actions/instruction/transfer/Continue');
    const {ReturnTS} = require('../compiler/actions/instruction/transfer/Return');

    const {Call} = require('../compiler/actions/instruction/Call')
    const {Console} = require('../compiler/actions/instruction/Console')
    const {Statement} = require('../compiler/actions/instruction/Statement')

    const {And} = require('../compiler/actions/expression/logical/And')
    const {Or} = require('../compiler/actions/expression/logical/Or')
    const {Not} = require('../compiler/actions/expression/logical/Not')
    
    const {Plus} = require('../compiler/actions/expression/arithmetic/Plus')
    const {Mul} = require('../compiler/actions/expression/arithmetic/Mul')
    const {Div} = require('../compiler/actions/expression/arithmetic/Div')
    const {Minus} = require('../compiler/actions/expression/arithmetic/Minus')
    const {Neg} = require('../compiler/actions/expression/arithmetic/Neg')
    const {Inc} = require('../compiler/actions/expression/arithmetic/Inc')
    const {Dec} = require('../compiler/actions/expression/arithmetic/Dec')

    const {Equal} = require('../compiler/actions/expression/relational/Equal')
    const {NotEqual} = require('../compiler/actions/expression/relational/NotEqual')
    const {Less} = require('../compiler/actions/expression/relational/Less')
    const {Great} = require('../compiler/actions/expression/relational/Great')
    
    const {Primitive} = require('../compiler/actions/expression/literal/Primitive')
    const {Complex} = require('../compiler/actions/expression/literal/Complex')

    const {DeclareVariable} = require('../compiler/actions/instruction/variable/DeclareVariable')
    const {AssignVariable} = require('../compiler/actions/instruction/variable/AssignVariable')

    const {AccessVariable} = require('../compiler/actions/expression/access/AccessVariable')
    const {AccessFunction} = require('../compiler/actions/expression/access/AccessFunction')

    const {DeclareFunction} = require('../compiler/actions/instruction/function/DeclareFunction')

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// ignora los espacios en blanco
break;
case 1:// comentario de linea
break;
case 2:// comentario de multiples lineas	
break;
case 3:return 61
break;
case 4:return "log"
break;
case 5:return "console"
break;
case 6:return "."
break;
case 7:return ","
break;
case 8:return "++"
break;
case 9:return "--"
break;
case 10:return "true"
break;
case 11:return "false"
break;
case 12:return "return"
break;
case 13:return "let"
break;
case 14:return "const"
break;
case 15:return 74
break;
case 16:return 26;
break;
case 17:return 27;
break;
case 18:return 30;
break;
case 19:return 37;
break;
case 20:return "do"
break;
case 21:return "while"
break;
case 22:return "for"
break;
case 23:return 39;
break;
case 24:return 19;
break;
case 25:return "continue"
break;
case 26:return ";";
break;
case 27:return ":";
break;
case 28:return 31;
break;
case 29:return 33;
break;
case 30:return 22;
break;
case 31:return 23;
break;
case 32:return 53;
break;
case 33:return 51;
break;
case 34:return 54;
break;
case 35:return 55;
break;
case 36:return 44
break;
case 37:return 45
break;
case 38:return 56
break;
case 39:return 46;
break;
case 40:return 47;
break;
case 41:return 48;
break;
case 42:return 49;
break;
case 43:return 52;
break;
case 44:return 50;
break;
case 45:return 66;
break;
case 46: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 64; 
break;
case 47: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 64; 
break;
case 48:return 68;
break;
case 49:return 5;
break;
case 50:return 'ERROR'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:(([0-9]+)(\.([0-9]+))?))/,/^(?:log\b)/,/^(?:console\b)/,/^(?:\.)/,/^(?:,)/,/^(?:\+\+)/,/^(?:--)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:return\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:do\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:;)/,/^(?::)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:'([^\\\']|\\.)*')/,/^(?:"([^\\\"]|\\.)*")/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}